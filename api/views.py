from django.core.mail import send_mail
from django.db.models import Count
from django.views.decorators.csrf import csrf_protect
from rest_framework import viewsets, mixins, status
from django.conf import settings
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework.response import Response
from rest_framework.decorators import action
from rest_framework.views import APIView
from rest_framework.permissions import AllowAny
import logging
import threading

from .permissions import IsSuperUserOrReadOnly
from .models import ContactMessage, Employee, Category, Product, Order, SaleItemImage, SaleItem, ProductImage
from .serializers import ContactMessageSerializer, EmployeeSerializer, CategorySerializer, ProductSerializer, \
    OrderSerializer, SaleItemImageSerializer, SaleItemSerializer, ProductImageSerializer, CategoryProductsSerializer

logger = logging.getLogger(__name__)


class ContactMessageViewSet(mixins.CreateModelMixin, viewsets.GenericViewSet):
    queryset = ContactMessage.objects.all()
    serializer_class = ContactMessageSerializer
    http_method_names = ['post']

    def perform_create(self, serializer):
        instance = serializer.save()
        send_mail(
            subject='–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ Geology',
            message=f'–û—Ç: {instance.email}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {instance.message}',
            from_email=settings.EMAIL_HOST_USER,
            recipient_list=[settings.ADMIN_EMAIL],
            fail_silently=False,
        )


class EmployeeViewSet(viewsets.ReadOnlyModelViewSet):
    permission_classes = [IsSuperUserOrReadOnly]
    queryset = Employee.objects.all()
    serializer_class = EmployeeSerializer

    def get_serializer_context(self):
        return {'request': self.request}


class CategoryViewSet(viewsets.ModelViewSet):
    queryset = Category.objects.all()
    serializer_class = CategorySerializer
    permission_classes = [IsSuperUserOrReadOnly]

    def get_serializer_context(self):
        return {'request': self.request}

    @action(detail=True, methods=['get'])
    def products(self, request, pk=None):
        category = self.get_object()
        products = Product.objects.filter(category=category).prefetch_related('images')
        serializer = ProductSerializer(products, many=True, context={'request': request})
        return Response(serializer.data)

    def retrieve(self, request, *args, **kwargs):
        instance = self.get_object()
        serializer = CategoryProductsSerializer(instance, context={'request': request})
        return Response(serializer.data)


def get_filter_counts(queryset, filter_fields):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
    result = {}
    for field in filter_fields:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        aggregation = (
            queryset
            .exclude(**{field: None})
            .exclude(**{field: ""})
            .values(field)
            .annotate(count=Count('id'))
            .order_by(field)
        )

        result[field] = [
            {"value": item[field], "count": item["count"]}
            for item in aggregation
        ]
    return result


class CategoryFiltersView(APIView):
    filter_fields = [
        'size', 'brand', 'thread_connection',
        'thread_connection_2', 'armament', 'seal', 'iadc'
    ]

    def get(self, request, category_id):
        try:
            category = Category.objects.get(id=category_id)
        except Category.DoesNotExist:
            return Response({"error": "Category not found"}, status=404)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        filters = {}
        for field in self.filter_fields:
            value = request.query_params.get(field)
            if value:
                filters[f"{field}__exact"] = value

        # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é
        availability = request.query_params.get('availability')
        if availability == 'in-stock':
            filters['quantity__gt'] = 0
        elif availability == 'out-of-stock':
            filters['quantity'] = 0

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        products = Product.objects.filter(category=category, **filters)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        result = get_filter_counts(products, self.filter_fields)
        return Response(result)


class ProductViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all().prefetch_related('images')
    serializer_class = ProductSerializer
    permission_classes = [IsSuperUserOrReadOnly]
    filter_fields = [
        'size', 'brand', 'thread_connection',
        'thread_connection_2', 'armament', 'seal', 'iadc'
    ]

    def get_serializer_context(self):
        return {'request': self.request}

    def get_queryset(self):
        queryset = super().get_queryset()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = self.request.query_params.get('category')
        if category_id:
            queryset = queryset.filter(category_id=category_id)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é
        availability = self.request.query_params.get('availability')
        if availability == 'in-stock':
            queryset = queryset.filter(quantity__gt=0)
        elif availability == 'out-of-stock':
            queryset = queryset.filter(quantity=0)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        for field in self.filter_fields:
            value = self.request.query_params.get(field)
            if value:
                queryset = queryset.filter(**{field: value})

        return queryset

    @action(detail=False, methods=['get'])
    def filters(self, request):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π queryset
        queryset = self.filter_queryset(self.get_queryset())

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        result = get_filter_counts(queryset, self.filter_fields)
        return Response(result)


class ProductImageViewSet(viewsets.ModelViewSet):
    serializer_class = ProductImageSerializer
    parser_classes = (MultiPartParser, FormParser)
    queryset = ProductImage.objects.all()
    permission_classes = [IsSuperUserOrReadOnly]

    def get_queryset(self):
        product_id = self.request.query_params.get('product')
        if product_id:
            return ProductImage.objects.filter(product_id=product_id)
        return super().get_queryset()

    def get_serializer_context(self):
        context = super().get_serializer_context()
        context['request'] = self.request
        return context


class OrderViewSet(viewsets.ModelViewSet):
    queryset = Order.objects.all()
    serializer_class = OrderSerializer
    permission_classes = [AllowAny]
    http_method_names = ['get', 'post']
    authentication_classes = []

    def create(self, request, *args, **kwargs):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        order = serializer.save()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        try:
            threading.Thread(
                target=self.send_simple_email,
                args=(order,),
                daemon=True
            ).start()
        except Exception as e:
            logger.error(f"Failed to start email thread: {str(e)}")

        return Response(serializer.data, status=status.HTTP_201_CREATED)

    def send_simple_email(self, order):
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            subject = f'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}'
            message = (
                f"–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
                f"üîπ –ù–æ–º–µ—Ä: {order.id}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.first_name} {order.last_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
                f"‚úâÔ∏è Email: {order.email}\n"
                f"üìç –ê–¥—Ä–µ—Å: {order.city}, {order.address}\n"
                f"üí∞ –°—É–º–º–∞: {order.total} —Ä—É–±.\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä—ã:\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
            for i, product in enumerate(order.products, 1):
                message += (
                    f"{i}. {product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - "
                    f"{product.get('quantity', 1)} —à—Ç. x "
                    f"{product.get('price', 0)} —Ä—É–±.\n"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            send_mail(
                subject,
                message,
                settings.DEFAULT_FROM_EMAIL,
                [settings.EMAIL_HOST_USER],
                fail_silently=False
            )
            logger.info(f"Order email sent for order #{order.id}")

        except Exception as e:
            logger.error(f"Email sending failed for order #{order.id}: {str(e)}")


class SaleItemViewSet(viewsets.ModelViewSet):
    permission_classes = [IsSuperUserOrReadOnly]
    queryset = SaleItem.objects.prefetch_related('images').all()
    serializer_class = SaleItemSerializer
    lookup_field = 'slug'

    def get_queryset(self):
        if self.action == 'list':
            return self.queryset.filter(is_active=True)
        return self.queryset


class SaleItemImageViewSet(viewsets.ModelViewSet):
    serializer_class = SaleItemImageSerializer
    queryset = SaleItemImage.objects.all()
    permission_classes = [IsSuperUserOrReadOnly]

    def get_queryset(self):
        sale_item_id = self.request.query_params.get('sale_item')
        if sale_item_id:
            return SaleItemImage.objects.filter(sale_item_id=sale_item_id)
        return super().get_queryset()
